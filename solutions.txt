Exceptions :try:
        a = float(input('Enter a number: '))
except ValueError:
        print('You entered an invalid number')
		
a = input('Input an integer: ')
>>> 1.1.is_integer()
False
a = int(input())
a = Fraction(input('Enter a fraction: '))
		>>> try:
				a = Fraction(input('Enter a fraction: '))
		except ZeroDivisionError:
				print('Invalid fraction')
z = complex(input('Enter a complex number: '))
		>>> try:
				from fractions import Fraction
				a = Fraction(input('Enter a fraction: '))
		except ZeroDivisionError:
				print('Invalid fraction')				
---------------------------Functions ----------------
>>> def is_factor(a, b):
        if b % a == 0:
            return True
        else:
            return False
---------------------------------------Create a kist with n numbers---------------------------------------
mylist = list(range(10))
-------------------------Loop ----------
>>> for i in range(1, 4):
        print(i)
1
2
3
------------- Loop  step
>>> for i in range(1,10,2):
        print(i)
1
3
5
7
9
---------------
 def factors(b):

?     for i in range(1, b+1):
           if b % i == 0:
               print(i)

   if __name__ == '__main__':

       b = input('Your Number Please: ')
       b = float(b)

?     if b > 0 and b.is_integer():
           factors(int(b))
       else:
           print('Please enter a positive integer')
-----------------------------------------Format
>>> '{0:.2f}'.format(1.25456)
>>> '{0:.2f}'.format(1.25556)
'1.26'
>>> (25.5 * 2.54) / 100
--------------Quadratic equation 
D = (b**2 â€“ 4*a*c)**0.5
square root of b**2 - 4*a*c
-------------------------
def roots(a, b, c):

    D = (b*b - 4*a*c)**0.5
    x_1 = (-b + D)/(2*a)
    x_2 = (-b - D)/(2*a)

    print('x1: {0}'.format(x_1))
    print('x2: {0}'.format(x_2))
if __name__ == '__main__':
    a = input('Enter a: ')
    b = input('Enter b: ')
    c = input('Enter c: ')
-----------------------------------------------Hackerank Staircase-------------
__author__ = 'mattallah'
def printStaircase(num_stairs):
    for stairs in range(1, num_stairs + 1):
        print (' ' * (num_stairs - stairs) + '#' * stairs)


if __name__ == '__main__':

    t = int(input())
    printStaircase(t)
-----------------------------------------------Hacker Rank -------------------------

import sys


d1,m1,y1 = raw_input().strip().split(' ')
d1,m1,y1 = [int(d1),int(m1),int(y1)]
d2,m2,y2 = raw_input().strip().split(' ')
d2,m2,y2 = [int(d2),int(m2),int(y2)]


n = int(input().strip())
s = input().strip()
k = int(input().strip())


------------------------------------------------Hacker Rank Library ------------
str1 = input()

d1 = str1.strip().split(' ')
2 1 1201
['2', '1', '1201']

strip is a string function but not an array functions

-------------------------------------------Hacker Rank code----------
n = int(raw_input())
for i in range(0,n):
    a, b = raw_input().split()
    print int(a) + int(b)

-----------------------------------Hack rank solutions -----------------------------------------
http://www.martinkysel.com/hackerrank-solutions/

-----------------------------------------Hacker Rank  Library fine --------------------------------

__author__ = 'mattallah'
sty1 = input()
sty2 = input()
#actual return date
d1,m1,y1 = sty1.strip().split(' ')
d1,m1,y1 = [int(d1), int(m1),int(y1)]
#Return date
d2,m2,y2 = sty2.strip().split(' ')
d2,m2,y2 = [int(d2), int(m2),int(y2)]
fine = 0
hackos = 0
fine_days = 0
print (y1)
print (2)
print (d1)
print (d2)
if y1 ==  y2:
    if m2==m1:
        fine_days = d2-d1
        fine_days = abs(fine_days)
        if fine_days>0:
            fine = fine_days * 15
    elif m2>m1:
        fine_months = m2-m1
        fine = fine_months * 500
else:
    fine = 1000
print (fine)
------------------------------Lambda Expression------------
def make_incrementor (n): return lambda x: x + n
print (make_incrementor(22)(33))  #55

---------------------------------------Hcker Rank Ceaser Cipher-----------------------------------
def encryptCaesar(s, k):
    output = list(s)
    for idx, l in enumerate(output):
        if l.isalpha():
            if l.isupper():
                new_char = ord(l)+k
                if new_char > ord('Z'):
                    new_char = new_char - ord('Z') + ord('A') - 1
                output[idx] = chr(new_char)
            else:
                new_char = ord(l)+k
                if new_char > ord('z'):
                    new_char = new_char - ord('z') + ord('a') - 1
                output[idx] = chr(new_char)
    return ''.join(output)
     
     
if __name__ == '__main__':
    n = input()
    s = input()
    k = int(input())
    print (encryptCaesar(s, k))
-----------------------------------------Hacker Rank   Lonly Integer-------------------------------------------
def lonelyinteger(b):
    from collections import Counter
    b = list(b.strip().split(' '))
    cnt = Counter()
    list1 = []
    list2 = []
    unique = []
    for i in b:
        cnt[i] +=1
    for k in cnt.keys():
        k = int(k)
        list1.append(k)
    for v in cnt.values():
        list2.append(v)
    dict1 = dict(zip(list1,list2))
    for key,value in dict1.items():
        if value==1:
            unique.append(key)
    for i in unique:
        print(i)
if __name__ == '__main__':
    n = input()
    #s = input()
    i = input()
lonelyinteger(i)
--------------------------------------Hacker Rank  Filpping Integers--------------------------------------------------------------------
#!/usr/bin/py
def flipBits(a):
   return a ^ 4294967295 # 2^32 - 1
 
if __name__ == '__main__':
    n = int(input())
    for i in range(0,n):
        a = int(input())
        res = flipBits(a)
        print (res)
------------------------------------------Hacker Rank -------------------------------------------------------
